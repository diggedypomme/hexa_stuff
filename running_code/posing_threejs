<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - animation - skinning - ik</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<meta name="author" content="Antoine BERNIER (abernier)" />
		<link type="text/css" rel="stylesheet" href="main.css">
		<style>
		body {color:white;}
		#info a {
			color:#4d6675;
		}
		</style>
	</head>
	<body>
	
	
	
		<div id="info">
	<iframe id="hiddenframe"
    title="Inline Frame Example"
    width="200"
    height="50"
    src="http://example.com">
	style="display:none"
</iframe>
		</div>

		<!-- Import maps polyfill -->
		<!-- Remove this when import maps will be widely supported -->
		<script async src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"></script>

		<script type="importmap">
		{
			"imports": {
				"three": "../build/three.module.js",
				"three/addons/": "./jsm/"
			}
		}
		</script>

		<script type="module">
		import * as THREE from 'three';

		import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
		import { TransformControls } from 'three/addons/controls/TransformControls.js';
		import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
		import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';
		import { CCDIKSolver, CCDIKHelper } from './jsm/animation/CCDIKSolver.js';
		import Stats from 'three/addons/libs/stats.module.js';
		import { GUI } from 'three/addons/libs/lil-gui.module.min.js';

		let scene, camera, renderer, orbitControls, transformControls;
		let mirrorSphereCamera;

		const OOI = {};
		let IKSolver;

		let stats, gui, conf;
		const v0 = new THREE.Vector3();

		init().then( animate );

		async function init() {

			conf = {

				ik_solver: true,
				update: updateIK,
				print_angles: print_angles,
				setleg: setleg,
				leg_id: 0,
				limb_rotation:0,
				rotate_leg:true,
			    head_rotation:1000,
				rotate_head:rotate_head,
				timer:150
			};

			scene = new THREE.Scene();
			scene.fog = new THREE.FogExp2( 0xffffff, .17 );
			scene.background = new THREE.Color( 0xdddddd );

			camera = new THREE.PerspectiveCamera( 55, window.innerWidth / window.innerHeight, 0.001, 5000 );
			camera.position.set( 0.0, 1.0, 0.0 );
			camera.lookAt( scene.position );

			const ambientLight = new THREE.AmbientLight( 0xffffff, 8 ); // soft white light
			scene.add( ambientLight );

			renderer = new THREE.WebGLRenderer( { antialias: true, logarithmicDepthBuffer: true } );
			renderer.setPixelRatio( window.devicePixelRatio );
			renderer.setSize( window.innerWidth, window.innerHeight );
			renderer.useLegacyLights = false;
			document.body.appendChild( renderer.domElement );

			stats = new Stats();
			document.body.appendChild( stats.dom );

			orbitControls = new OrbitControls( camera, renderer.domElement );
			orbitControls.minDistance = 0.2;
			orbitControls.maxDistance = 1.5;
			orbitControls.enableDamping = true;

			const dracoLoader = new DRACOLoader();
			dracoLoader.setDecoderPath( 'jsm/libs/draco/' );
			const gltfLoader = new GLTFLoader();
			gltfLoader.setDRACOLoader( dracoLoader );

			const gltf = await gltfLoader.loadAsync( 'models/gltf/kira8.glb' );
			gltf.scene.traverse( n => {

				//if ( n.name === 'head' ) OOI.head = n;
				
				if ( n.name === 'Clavicle_l' ) OOI.Clavicle_l = n;
				if ( n.name === 'lowerarm_l' ) OOI.lowerarm_l = n;
				if ( n.name === 'Upperarm_l' ) OOI.Upperarm_l = n;
				if ( n.name === 'hand_l' ) OOI.hand_l = n;
				if ( n.name === 'target_hand_l' ) OOI.target_hand_l = n;

				if ( n.name === 'boule' ) OOI.sphere = n;
				if ( n.name === 'Kira_Shirt_left' ) OOI.kira = n;

			} );
			scene.add( gltf.scene );

			orbitControls.target.copy( OOI.sphere.position ); // orbit controls lookAt the sphere
			//OOI.hand_l.attach( OOI.sphere );

			// mirror sphere cube-camera
			const cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 1024 );
			mirrorSphereCamera = new THREE.CubeCamera( 0.05, 50, cubeRenderTarget );
			scene.add( mirrorSphereCamera );
			const mirrorSphereMaterial = new THREE.MeshBasicMaterial( { envMap: cubeRenderTarget.texture } );
			OOI.sphere.material = mirrorSphereMaterial;

			transformControls = new TransformControls( camera, renderer.domElement );
			transformControls.size = 0.75;
			transformControls.showX = false;
			transformControls.space = 'world';
			transformControls.attach( OOI.target_hand_l );
			scene.add( transformControls );
		
			// disable orbitControls while using transformControls
			transformControls.addEventListener( 'mouseDown', () => orbitControls.enabled = false );
			transformControls.addEventListener( 'mouseUp', () => orbitControls.enabled = true );

			OOI.kira.add( OOI.kira.skeleton.bones[ 0 ] );
			const iks = [
				{
					target: 22, // "target_hand_l"
					effector: 6, // "hand_l"
					links: [
						{
							index: 5, // "lowerarm_l"
							rotationMin: new THREE.Vector3( 0,  0, - 1.57 ),
							rotationMax: new THREE.Vector3( 0, 0, 1.57 )
						},
						{
							index: 4, // "Upperarm_l"
							rotationMin: new THREE.Vector3( 0,  0, - 1.57 ),
							rotationMax: new THREE.Vector3( 0, 0, 1.57 )
						},
						//{
						//	index: 3, // "Clavicle_l"
						//	rotationMin: new THREE.Vector3(  0,  -0.5, 2 ),
						//	rotationMax: new THREE.Vector3(0, 0.5, 2 )
						//	//rotationMin: new THREE.Vector3( 0,  -0.5708, 0 ),
						//	//rotationMax: new THREE.Vector3( 0, 0.5708, 0 )
						//},						
					],
				}
			];
			IKSolver = new CCDIKSolver( OOI.kira, iks );
			const ccdikhelper = new CCDIKHelper( OOI.kira, iks, 0.01 );
			scene.add( ccdikhelper );

			gui = new GUI();

			gui.add( conf, 'ik_solver' ).name( 'IK auto update' );
			gui.add( conf, 'update' ).name( 'IK manual update()' );
			gui.add( conf, 'print_angles' ).name( 'print angles()' );
			gui.add( conf, 'setleg' ).name( 'setleg()' );
			gui.add( conf, 'leg_id', 0, 7 ,1); // 
			gui.add( conf, 'limb_rotation', -45, 45,1 ); // 
			gui.add( conf, 'rotate_leg' ).name( 'Rotate leg' );
			gui.add( conf, 'head_rotation', 0, 2500 ,1); // 
			gui.add( conf, 'rotate_head' ).name( 'rotate_head()' );
			gui.add( conf, 'timer', 0, 2000 ,1); // 
			gui.open();

			window.addEventListener( 'resize', onWindowResize, false );

		}
		function print_angles()
		{
		console.log("Printed")
		console.log(scene)
		const position = new THREE.Vector3();
		
		
		
		
		
		
		
// Find Upperarm_l bone
var upperArmBone = scene.getObjectByName("Upperarm_l");

// Print the rotation of the Upperarm_l bone
if (upperArmBone) {
  // Get the Z-axis rotation component of the bone
  var zRotation = upperArmBone.rotation.z;

  // Map the zRotation value from the [-PI, PI] range to the [1000, 2000] range
  var mappedRotation = mapRange(zRotation, -Math.PI, Math.PI, 1000, 2000);

  // Round the mapped rotation value to the nearest whole number
  var roundedRotation = Math.round(mappedRotation);

  console.log("Rotation of Upperarm_l:", roundedRotation);
}

let upper = (2000-roundedRotation)+1000
console.log("pre upper "+upper)
 upper = mapRange(upper, 1250, 1750, 1000, 2000);
 console.log("poost upper "+upper)
// Find lowerarm_l bone




var lowerArmBone = scene.getObjectByName("lowerarm_l");

// Print the rotation of the lowerarm_l bone
if (lowerArmBone) {
  // Get the Z-axis rotation component of the bone
  var zRotation = lowerArmBone.rotation.z;

  // Map the zRotation value from the [-PI, PI] range to the [1000, 2000] range
  var mappedRotation = mapRange(zRotation, -Math.PI, Math.PI, 1000, 2000);

  // Round the mapped rotation value to the nearest whole number
  var roundedRotation = Math.round(mappedRotation);

  console.log("Rotation of lowerarm_l:", roundedRotation);
}
else
{
console.log("failed to find")

}



let lower =(2000-roundedRotation)+1000
 lower = mapRange(lower, 1250, 1750, 1000, 2000);


return [lower,upper]




		}
		
		
		
		function setleg()
		{
		
		
		let num = conf.leg_id*3;
		let lower_id="V"+num.toString().padStart(3, '0')+"P"
		let upper_id="V"+(num+1).toString().padStart(3, '0')+"P"
		let rot_id="V"+(num+2).toString().padStart(3, '0')+"P"
	
		//let numString = [,num+1.toString().padStart(3, '0') ]// numString is now '0600'
		//let leg_id_text="V"+numString*3
		console.log(lower_id,upper_id)
		
		
		let teststring=print_angles()
		console.log("test string lower: "+teststring[0])
		console.log("test string upper: "+teststring[1])
	
		let longstring=lower_id+teststring[0]
		longstring=longstring+upper_id+teststring[1]
		
		
		if (conf.rotate_leg==true)
		{
		console.log("rotating legg")
		console.log(conf.limb_rotation)
		let mapped_rot= mapRange(conf.limb_rotation, -45, 45, 1250, 1750)
		mapped_rot=Math.floor(mapped_rot) 
		console.log(mapped_rot)
		let legstring = mapped_rot.toString().padStart(4, '0'); // numString is now '0600'
		longstring=longstring+rot_id+legstring
		}

		let for_how_long = conf.timer;
		for_how_long = for_how_long.toString().padStart(4, '0'); // numString is now '0600'
		
		
		const url = 'http://192.168.0.222:5000/send/'+longstring+"T"+for_how_long;
        console.log(url)
		//having to use an iframe as it was insisting on cors
//const params = {
//  method: 'GET',
//  headers: {
//    'Content-Type': 'application/json'
//  }
//};
//
//fetch(url, params)
//  .then(response => response.json())
//  .then(data => {
//    console.log(data);
//  })
//  .catch(error => {
//    console.error(error);
//  });
//
//console.log(longstring)

document.getElementById("hiddenframe").src=url



}


		
	function rotate_head()
{
console.log(conf.head_rotation);
//console.log(conf.limb_rotation);
//// Get the slider object by its ID
//const slider = lil.GUI.getElement('rotate_head');
//
//// Get the current value of the slider
//const sliderValue = slider.getValue();
//console.log(sliderValue)


let num = conf.head_rotation;
let numString = num.toString().padStart(4, '0'); // numString is now '0600'

let for_how_long = conf.timer;
for_how_long = for_how_long.toString().padStart(4, '0'); // numString is now '0600'

document.getElementById("hiddenframe").src="http://192.168.0.222:5000/send/V018P"+numString+"T"+for_how_long

}	
		
		
		
		
		
		
		
		
		
		// Linear interpolation function
function mapRange(value, fromMin, fromMax, toMin, toMax) {
  return (value - fromMin) * (toMax - toMin) / (fromMax - fromMin) + toMin;
}
		
		
		

		function animate( ) {

			//if ( OOI.sphere && mirrorSphereCamera ) {
			//
			//	OOI.sphere.visible = false;
			//	OOI.sphere.getWorldPosition( mirrorSphereCamera.position );
			//	mirrorSphereCamera.update( renderer, scene );
			//	OOI.sphere.visible = true;
			//
			//}
			//
			//if ( OOI.sphere && conf.followSphere ) {
			//
			//	// orbitControls follows the sphere
			//	OOI.sphere.getWorldPosition( v0 );
			//	orbitControls.target.lerp( v0, 0.1 );
			//
			//}
			//
			//if ( OOI.head && OOI.sphere && conf.turnHead ) {
			//
			//	// turn head
			//	OOI.sphere.getWorldPosition( v0 );
			//	OOI.head.lookAt( v0 );
			//	OOI.head.rotation.set( OOI.head.rotation.x, OOI.head.rotation.y + Math.PI, OOI.head.rotation.z );
			//
			//}

			if ( conf.ik_solver ) {

				updateIK();

			}

			orbitControls.update();
			renderer.render( scene, camera );

			stats.update(); // fps stats

			requestAnimationFrame( animate );

		}

		function updateIK() {

			if ( IKSolver ) IKSolver.update();

			scene.traverse( function ( object ) {

				if ( object.isSkinnedMesh ) object.computeBoundingSphere();

			} );

		}

		function onWindowResize() {

			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();

			renderer.setSize( window.innerWidth, window.innerHeight );

		}
		</script>
	</body>
</html>
